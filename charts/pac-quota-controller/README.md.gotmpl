{{ template "chart.header" . }}

{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

## TL;DR

```console
helm install pac-quota-controller oci://ghcr.io/powerhome/pac-quota-controller --version <version> -n pac-quota-controller-system --create-namespace
```


## Introduction

This chart bootstraps a [PAC Quota Controller](https://github.com/powerhome/pac-quota-controller) deployment on a [Kubernetes](https://kubernetes.io) cluster using the [Helm](https://helm.sh) package manager.

The PAC Quota Controller extends Kubernetes with a ClusterResourceQuota custom resource that allows defining resource quotas that span multiple namespaces.

### Object Count Quotas (Native & Extended Resources)

You can specify object count quotas for native and extended Kubernetes resources using the `hard` field in the ClusterResourceQuota spec.

#### Supported object count resources

- `pods`                                 (Pod count)
- `services`                             (Service count)
- `services.loadbalancers`               (Service type=LoadBalancer count)
- `services.nodeports`                   (Service type=NodePort count)
- `configmaps`                           (ConfigMap count)
- `secrets`                              (Secret count)
- `persistentvolumeclaims`               (PVC count)
- `replicationcontrollers`               (ReplicationController count)
- `deployments.apps`                     (Deployment count)
- `statefulsets.apps`                    (StatefulSet count)
- `daemonsets.apps`                      (DaemonSet count)
- `jobs.batch`                           (Job count)
- `cronjobs.batch`                       (CronJob count)
- `horizontalpodautoscalers.autoscaling` (HPA count)
- `ingresses.networking.k8s.io`          (Ingress count)

Subtype quotas (e.g., `services.loadbalancers`) cannot exceed the total for the parent resource (e.g., `services`).

Custom CRDs are not supported for object count quotas.

#### Example

```yaml
spec:
  hard:
    pods: "10"                                 # Pod count
    services: "5"                              # Service count
    services.loadbalancers: "2"                # Service type=LoadBalancer count
    services.nodeports: "3"                    # Service type=NodePort count
    configmaps: "20"                           # ConfigMap count
    secrets: "15"                              # Secret count
    persistentvolumeclaims: "8"                # PVC count
    replicationcontrollers: "4"                # ReplicationController count
    deployments.apps: "6"                      # Deployment count
    statefulsets.apps: "2"                     # StatefulSet count
    daemonsets.apps: "2"                       # DaemonSet count
    jobs.batch: "5"                            # Job count
    cronjobs.batch: "3"                        # CronJob count
    horizontalpodautoscalers.autoscaling: "2"  # HPA count
    ingresses.networking.k8s.io: "3"           # Ingress count
```

### Container Images

This chart can use container images from GitHub Container Registry:

```console
ghcr.io/powerhome/pac-quota-controller:{{ template "chart.appVersion" . }}
```

You can configure which registry to use by modifying the `controllerManager.container.image.repository` value.

## Prerequisites

- Kubernetes 1.19+
- Helm 3.8.0+

## Installing

You can configure which registry to use by modifying the `controllerManager.container.image.repository` value.

This chart is the single source of truth for deploying PAC Quota Controller. All manifests (CRDs, RBAC, webhooks, cert-manager, etc.) are managed here. Do not use Kustomize or Kubebuilder-generated manifests for deployment or testing.

To install the chart with the release name `pac-quota-controller`:

```sh
helm install pac-quota-controller oci://ghcr.io/powerhome/pac-quota-controller --version <version> -n pac-quota-controller-system --create-namespace
```

### Private Images

If you are using a private image registry (such as a private GHCR repository), you can provide image pull secrets:

```yaml
controllerManager:
  imagePullSecrets:
    - name: ghcr-creds
```

Then create the secret in your namespace:

```sh
kubectl create secret docker-registry ghcr-creds \
  --docker-server=https://ghcr.io \
  --docker-username=<your-username> \
  --docker-password=<your-token> \
  --docker-email=<your-email>
```

## Upgrading

To upgrade the chart:

```sh
helm upgrade pac-quota-controller oci://ghcr.io/powerhome/pac-quota-controller --version <version> -n pac-quota-controller-system
```

## Uninstalling the Chart

To uninstall/delete the `pac-quota-controller` deployment:

```console
helm delete pac-quota-controller -n pac-quota-controller-system
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

## RBAC

The PAC Quota Controller uses separate ClusterRoles for different functionality areas to support modular permission management:

### Core Controller Permissions

The main ClusterRole (`<release-name>-manager-role`) provides permissions for:

- **Core Resources**: namespaces, pods, services, pvcs, configmaps, secrets, replicationcontrollers
- **Workload Resources**: deployments, statefulsets, daemonsets (apps), jobs, cronjobs (batch)
- **Scaling Resources**: horizontalpodautoscalers (autoscaling)
- **Network Resources**: ingresses (networking.k8s.io)
- **Custom Resources**: clusterresourcequotas (quota.powerapp.cloud)

### Events Permissions

Event recording uses a separate ClusterRole (`<release-name>-events`) with permissions for:

- **Events Resource**: create, get, list, delete on core/v1 events

This separation allows for fine-grained permission management and optional event functionality.

### Configuration

```yaml
rbac:
  enable: true           # Enable RBAC resources
  annotations: {}        # Optional annotations for all RBAC resources

events:
  enable: true           # Controls event ClusterRole creation
```

When `events.enable: false`, the events ClusterRole and ClusterRoleBinding are not created.


### Metrics Service

The controller exposes a Prometheus-compatible `/metrics` endpoint on a dedicated HTTPS port and service:

- **Service name:** `pac-quota-controller-metrics-service`
- **Port:** `<metrics-port>` (default: 8443)
- **Path:** `/metrics`
- **Enabled by default:** Set `metrics.enable: true|false` in `values.yaml` to enable or disable the metrics server.
- **TLS:** Uses cert-manager or user-provided certificates (see [Certificates](#certificates)).

No network policy is applied; the endpoint is public within the cluster.

#### Example Prometheus Scrape Config

```yaml
- job_name: 'pac-quota-controller'
  kubernetes_sd_configs:
    - role: endpoints
  relabel_configs:
    - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_namespace]
      action: keep
      regex: pac-quota-controller-metrics-service;pac-quota-controller-system
    - source_labels: [__meta_kubernetes_endpoint_port_name]
      action: keep
      regex: metrics-server
  scheme: https
  tls_config:
    insecure_skip_verify: true # or use CA if available
```



You can configure the port and certificate mount path for metrics via `values.yaml`:

```yaml
metrics:
  enable: true
  port: 8443
  certPath: /tmp/k8s-metrics-server/metrics-certs   # Path where the metrics cert secret is mounted
```

The controller will always look for `tls.crt` and `tls.key` in the specified directory.

## Events

The PAC Quota Controller records Kubernetes Events to improve observability and enable event-driven monitoring. Events are automatically generated when:

- Pods, Services, or PVCs are denied due to quota violations
- Quota thresholds are reached or exceeded
- Namespace selections change

### Event Configuration

Events are enabled by default and can be configured via `values.yaml`:

```yaml
events:
  enable: true
  cleanup:
    ttl: "24h"                  # Time-to-live for events
    maxEventsPerCRQ: 100        # Maximum events per ClusterResourceQuota
    interval: "1h"              # Cleanup interval
  recording:
    controllerComponent: "pac-quota-controller-controller"
    webhookComponent: "pac-quota-controller-webhook"
    backoff:
      baseInterval: "30s"       # Initial interval for quota violation events
      maxInterval: "15m"        # Maximum interval between events
```

### Event Types

| Event Type | Reason | Source | Description |
|------------|--------|--------|-------------|
| Warning    | QuotaViolation | Webhook | Resource creation/update denied due to quota limits |
| Normal     | QuotaThresholdReached | Controller | Quota usage has reached configured threshold |
| Normal     | NamespaceSelectionChanged | Controller | Namespace selection for CRQ has changed |

### Event Cleanup

Events are automatically cleaned up based on:

- **TTL**: Events older than the configured TTL are removed
- **Count**: Only the most recent N events per ClusterResourceQuota are retained
- **Interval**: Cleanup runs at the configured interval

Events are recorded on ClusterResourceQuota objects and can be viewed with:

```bash
kubectl describe clusterresourcequota <name>
```


## Usage

Once installed, you can create a ClusterResourceQuota to limit resources across namespaces:

```yaml
apiVersion: quota.powerapp.cloud/v1alpha1
kind: ClusterResourceQuota
metadata:
  name: team-quota
spec:
  namespaceSelector:
    matchLabels:
      team: frontend
  hard:
    pods: "50"
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi
```

## Certificates

### Certmanager

This chart supports integration with [cert-manager](https://cert-manager.io/) for automatic provisioning and management of TLS certificates for webhooks and metrics endpoints. It is **strongly recommended** to use cert-manager.

If `certmanager.enable` is `true` (default), the chart will create `Certificate` resources, and cert-manager will be responsible for issuing and injecting the CA bundle and server certificates.

```sh
helm repo add jetstack https://charts.jetstack.io
helm repo update
helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version <CERT_MANAGER_VERSION> \
  --set crds.enabled=true
```

Replace `<CERT_MANAGER_VERSION>` with a compatible version (e.g., v1.18.0 or later).

### Manual Certificate Provisioning (Not Recommended)

If you choose not to use cert-manager (`certmanager.enable: false`), you must provide your own TLS certificates. This involves:

1. Creating Kubernetes `Secret` resources containing `tls.crt`, `tls.key`, and `ca.crt`.
2. Configure the following values in your `values.yaml` file:
    - `certmanager.enable`: Set to `false` to disable cert-manager integration.
    - `webhook.customTLS`:
        - `secretName`: Name of the Secret for the webhook server (must contain `tls.crt`, `tls.key`, `ca.crt`).
        - `caBundle`: Base64 encoded CA bundle (content of `ca.crt`) that the Kubernetes API server will use to trust your webhook.
    - `metrics.customTLS.secretName`: Name of the Secret for the metrics server (must contain `tls.crt`, `tls.key`).

| Name                        | Description                                                                                                                              | Type    | Default |
|-----------------------------|------------------------------------------------------------------------------------------------------------------------------------------|---------|---------|
| `certmanager.enable`        | Enable support for cert-manager. If `false`, manual certificate provisioning is required via `webhook.customTLS` and `metrics.customTLS`. | `bool`  | `true`  |
| `webhook.customTLS.secretName` | Secret name for webhook TLS certs if `certmanager.enable` is `false`.                                                                      | `string`| `""`    |
| `webhook.customTLS.caBundle`   | Base64 CA bundle for webhook if `certmanager.enable` is `false`.                                                                           | `string`| `""`    |
| `metrics.customTLS.secretName` | Secret name for metrics TLS certs if `certmanager.enable` is `false` and metrics are HTTPS.                                                | `string`| `""`    |

{{ template "chart.valuesSection" . }}
