// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockNamespaceSelector creates a new instance of MockNamespaceSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamespaceSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamespaceSelector {
	mock := &MockNamespaceSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNamespaceSelector is an autogenerated mock type for the NamespaceSelector type
type MockNamespaceSelector struct {
	mock.Mock
}

type MockNamespaceSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamespaceSelector) EXPECT() *MockNamespaceSelector_Expecter {
	return &MockNamespaceSelector_Expecter{mock: &_m.Mock}
}

// DetermineNamespaceChanges provides a mock function for the type MockNamespaceSelector
func (_mock *MockNamespaceSelector) DetermineNamespaceChanges(ctx context.Context, previousNamespaces []string) ([]string, []string, error) {
	ret := _mock.Called(ctx, previousNamespaces)

	if len(ret) == 0 {
		panic("no return value specified for DetermineNamespaceChanges")
	}

	var r0 []string
	var r1 []string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]string, []string, error)); ok {
		return returnFunc(ctx, previousNamespaces)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []string); ok {
		r0 = returnFunc(ctx, previousNamespaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) []string); ok {
		r1 = returnFunc(ctx, previousNamespaces)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, []string) error); ok {
		r2 = returnFunc(ctx, previousNamespaces)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNamespaceSelector_DetermineNamespaceChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetermineNamespaceChanges'
type MockNamespaceSelector_DetermineNamespaceChanges_Call struct {
	*mock.Call
}

// DetermineNamespaceChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - previousNamespaces []string
func (_e *MockNamespaceSelector_Expecter) DetermineNamespaceChanges(ctx interface{}, previousNamespaces interface{}) *MockNamespaceSelector_DetermineNamespaceChanges_Call {
	return &MockNamespaceSelector_DetermineNamespaceChanges_Call{Call: _e.mock.On("DetermineNamespaceChanges", ctx, previousNamespaces)}
}

func (_c *MockNamespaceSelector_DetermineNamespaceChanges_Call) Run(run func(ctx context.Context, previousNamespaces []string)) *MockNamespaceSelector_DetermineNamespaceChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNamespaceSelector_DetermineNamespaceChanges_Call) Return(added []string, removed []string, err error) *MockNamespaceSelector_DetermineNamespaceChanges_Call {
	_c.Call.Return(added, removed, err)
	return _c
}

func (_c *MockNamespaceSelector_DetermineNamespaceChanges_Call) RunAndReturn(run func(ctx context.Context, previousNamespaces []string) ([]string, []string, error)) *MockNamespaceSelector_DetermineNamespaceChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelectedNamespaces provides a mock function for the type MockNamespaceSelector
func (_mock *MockNamespaceSelector) GetSelectedNamespaces(ctx context.Context) ([]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSelectedNamespaces")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNamespaceSelector_GetSelectedNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelectedNamespaces'
type MockNamespaceSelector_GetSelectedNamespaces_Call struct {
	*mock.Call
}

// GetSelectedNamespaces is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNamespaceSelector_Expecter) GetSelectedNamespaces(ctx interface{}) *MockNamespaceSelector_GetSelectedNamespaces_Call {
	return &MockNamespaceSelector_GetSelectedNamespaces_Call{Call: _e.mock.On("GetSelectedNamespaces", ctx)}
}

func (_c *MockNamespaceSelector_GetSelectedNamespaces_Call) Run(run func(ctx context.Context)) *MockNamespaceSelector_GetSelectedNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNamespaceSelector_GetSelectedNamespaces_Call) Return(strings []string, err error) *MockNamespaceSelector_GetSelectedNamespaces_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockNamespaceSelector_GetSelectedNamespaces_Call) RunAndReturn(run func(ctx context.Context) ([]string, error)) *MockNamespaceSelector_GetSelectedNamespaces_Call {
	_c.Call.Return(run)
	return _c
}
