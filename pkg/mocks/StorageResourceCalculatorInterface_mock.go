// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
)

// NewMockStorageResourceCalculatorInterface creates a new instance of MockStorageResourceCalculatorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageResourceCalculatorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageResourceCalculatorInterface {
	mock := &MockStorageResourceCalculatorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageResourceCalculatorInterface is an autogenerated mock type for the StorageResourceCalculatorInterface type
type MockStorageResourceCalculatorInterface struct {
	mock.Mock
}

type MockStorageResourceCalculatorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageResourceCalculatorInterface) EXPECT() *MockStorageResourceCalculatorInterface_Expecter {
	return &MockStorageResourceCalculatorInterface_Expecter{mock: &_m.Mock}
}

// CalculatePVCCount provides a mock function for the type MockStorageResourceCalculatorInterface
func (_mock *MockStorageResourceCalculatorInterface) CalculatePVCCount(ctx context.Context, namespace string) (int64, error) {
	ret := _mock.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePVCCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, namespace)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, namespace)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageResourceCalculatorInterface_CalculatePVCCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculatePVCCount'
type MockStorageResourceCalculatorInterface_CalculatePVCCount_Call struct {
	*mock.Call
}

// CalculatePVCCount is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
func (_e *MockStorageResourceCalculatorInterface_Expecter) CalculatePVCCount(ctx interface{}, namespace interface{}) *MockStorageResourceCalculatorInterface_CalculatePVCCount_Call {
	return &MockStorageResourceCalculatorInterface_CalculatePVCCount_Call{Call: _e.mock.On("CalculatePVCCount", ctx, namespace)}
}

func (_c *MockStorageResourceCalculatorInterface_CalculatePVCCount_Call) Run(run func(ctx context.Context, namespace string)) *MockStorageResourceCalculatorInterface_CalculatePVCCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculatePVCCount_Call) Return(n int64, err error) *MockStorageResourceCalculatorInterface_CalculatePVCCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculatePVCCount_Call) RunAndReturn(run func(ctx context.Context, namespace string) (int64, error)) *MockStorageResourceCalculatorInterface_CalculatePVCCount_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateStorageClassCount provides a mock function for the type MockStorageResourceCalculatorInterface
func (_mock *MockStorageResourceCalculatorInterface) CalculateStorageClassCount(ctx context.Context, namespace string, storageClass string) (int64, error) {
	ret := _mock.Called(ctx, namespace, storageClass)

	if len(ret) == 0 {
		panic("no return value specified for CalculateStorageClassCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return returnFunc(ctx, namespace, storageClass)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = returnFunc(ctx, namespace, storageClass)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, namespace, storageClass)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateStorageClassCount'
type MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call struct {
	*mock.Call
}

// CalculateStorageClassCount is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - storageClass string
func (_e *MockStorageResourceCalculatorInterface_Expecter) CalculateStorageClassCount(ctx interface{}, namespace interface{}, storageClass interface{}) *MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call {
	return &MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call{Call: _e.mock.On("CalculateStorageClassCount", ctx, namespace, storageClass)}
}

func (_c *MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call) Run(run func(ctx context.Context, namespace string, storageClass string)) *MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call) Return(n int64, err error) *MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call) RunAndReturn(run func(ctx context.Context, namespace string, storageClass string) (int64, error)) *MockStorageResourceCalculatorInterface_CalculateStorageClassCount_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateStorageClassUsage provides a mock function for the type MockStorageResourceCalculatorInterface
func (_mock *MockStorageResourceCalculatorInterface) CalculateStorageClassUsage(ctx context.Context, namespace string, storageClass string) (resource.Quantity, error) {
	ret := _mock.Called(ctx, namespace, storageClass)

	if len(ret) == 0 {
		panic("no return value specified for CalculateStorageClassUsage")
	}

	var r0 resource.Quantity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (resource.Quantity, error)); ok {
		return returnFunc(ctx, namespace, storageClass)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) resource.Quantity); ok {
		r0 = returnFunc(ctx, namespace, storageClass)
	} else {
		r0 = ret.Get(0).(resource.Quantity)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, namespace, storageClass)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateStorageClassUsage'
type MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call struct {
	*mock.Call
}

// CalculateStorageClassUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - storageClass string
func (_e *MockStorageResourceCalculatorInterface_Expecter) CalculateStorageClassUsage(ctx interface{}, namespace interface{}, storageClass interface{}) *MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call {
	return &MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call{Call: _e.mock.On("CalculateStorageClassUsage", ctx, namespace, storageClass)}
}

func (_c *MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call) Run(run func(ctx context.Context, namespace string, storageClass string)) *MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call) Return(quantity resource.Quantity, err error) *MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call {
	_c.Call.Return(quantity, err)
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call) RunAndReturn(run func(ctx context.Context, namespace string, storageClass string) (resource.Quantity, error)) *MockStorageResourceCalculatorInterface_CalculateStorageClassUsage_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateTotalUsage provides a mock function for the type MockStorageResourceCalculatorInterface
func (_mock *MockStorageResourceCalculatorInterface) CalculateTotalUsage(ctx context.Context, namespace string) (map[v1.ResourceName]resource.Quantity, error) {
	ret := _mock.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for CalculateTotalUsage")
	}

	var r0 map[v1.ResourceName]resource.Quantity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[v1.ResourceName]resource.Quantity, error)); ok {
		return returnFunc(ctx, namespace)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[v1.ResourceName]resource.Quantity); ok {
		r0 = returnFunc(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[v1.ResourceName]resource.Quantity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateTotalUsage'
type MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call struct {
	*mock.Call
}

// CalculateTotalUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
func (_e *MockStorageResourceCalculatorInterface_Expecter) CalculateTotalUsage(ctx interface{}, namespace interface{}) *MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call {
	return &MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call{Call: _e.mock.On("CalculateTotalUsage", ctx, namespace)}
}

func (_c *MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call) Run(run func(ctx context.Context, namespace string)) *MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call) Return(resourceNameToQuantity map[v1.ResourceName]resource.Quantity, err error) *MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call {
	_c.Call.Return(resourceNameToQuantity, err)
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call) RunAndReturn(run func(ctx context.Context, namespace string) (map[v1.ResourceName]resource.Quantity, error)) *MockStorageResourceCalculatorInterface_CalculateTotalUsage_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateUsage provides a mock function for the type MockStorageResourceCalculatorInterface
func (_mock *MockStorageResourceCalculatorInterface) CalculateUsage(ctx context.Context, namespace string, resourceName v1.ResourceName) (resource.Quantity, error) {
	ret := _mock.Called(ctx, namespace, resourceName)

	if len(ret) == 0 {
		panic("no return value specified for CalculateUsage")
	}

	var r0 resource.Quantity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.ResourceName) (resource.Quantity, error)); ok {
		return returnFunc(ctx, namespace, resourceName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.ResourceName) resource.Quantity); ok {
		r0 = returnFunc(ctx, namespace, resourceName)
	} else {
		r0 = ret.Get(0).(resource.Quantity)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v1.ResourceName) error); ok {
		r1 = returnFunc(ctx, namespace, resourceName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageResourceCalculatorInterface_CalculateUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateUsage'
type MockStorageResourceCalculatorInterface_CalculateUsage_Call struct {
	*mock.Call
}

// CalculateUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - resourceName v1.ResourceName
func (_e *MockStorageResourceCalculatorInterface_Expecter) CalculateUsage(ctx interface{}, namespace interface{}, resourceName interface{}) *MockStorageResourceCalculatorInterface_CalculateUsage_Call {
	return &MockStorageResourceCalculatorInterface_CalculateUsage_Call{Call: _e.mock.On("CalculateUsage", ctx, namespace, resourceName)}
}

func (_c *MockStorageResourceCalculatorInterface_CalculateUsage_Call) Run(run func(ctx context.Context, namespace string, resourceName v1.ResourceName)) *MockStorageResourceCalculatorInterface_CalculateUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v1.ResourceName
		if args[2] != nil {
			arg2 = args[2].(v1.ResourceName)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateUsage_Call) Return(quantity resource.Quantity, err error) *MockStorageResourceCalculatorInterface_CalculateUsage_Call {
	_c.Call.Return(quantity, err)
	return _c
}

func (_c *MockStorageResourceCalculatorInterface_CalculateUsage_Call) RunAndReturn(run func(ctx context.Context, namespace string, resourceName v1.ResourceName) (resource.Quantity, error)) *MockStorageResourceCalculatorInterface_CalculateUsage_Call {
	_c.Call.Return(run)
	return _c
}
