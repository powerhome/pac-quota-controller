// Code generated by mockery. DO NOT EDIT.
package mocks

import (
	context "context"

	testify_mock "github.com/stretchr/testify/mock"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
)

// ServiceResourceCalculatorInterface is an autogenerated mock type for the ServiceResourceCalculatorInterface type
//
//go:generate mockery --name=ServiceResourceCalculatorInterface
type ServiceResourceCalculatorInterface struct {
	testify_mock.Mock
}

// CalculateUsage provides a mock function with given fields: ctx, namespace, resourceName
func (_m *ServiceResourceCalculatorInterface) CalculateUsage(ctx context.Context, namespace string, resourceName corev1.ResourceName) (resource.Quantity, error) {
	ret := _m.Called(ctx, namespace, resourceName)

	var r0 resource.Quantity
	if rf, ok := ret.Get(0).(func(context.Context, string, corev1.ResourceName) resource.Quantity); ok {
		r0 = rf(ctx, namespace, resourceName)
	} else {
		r0 = ret.Get(0).(resource.Quantity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, corev1.ResourceName) error); ok {
		r1 = rf(ctx, namespace, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountServices provides a mock function with given fields: ctx, namespace
func (_m *ServiceResourceCalculatorInterface) CountServices(ctx context.Context, namespace string) (int64, map[corev1.ServiceType]int64, error) {
	ret := _m.Called(ctx, namespace)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 map[corev1.ServiceType]int64
	if rf, ok := ret.Get(1).(func(context.Context, string) map[corev1.ServiceType]int64); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Get(1).(map[corev1.ServiceType]int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, namespace)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
