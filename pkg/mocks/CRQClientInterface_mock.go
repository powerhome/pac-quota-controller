// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/powerhome/pac-quota-controller/api/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
)

// NewMockCRQClientInterface creates a new instance of MockCRQClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCRQClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCRQClientInterface {
	mock := &MockCRQClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCRQClientInterface is an autogenerated mock type for the CRQClientInterface type
type MockCRQClientInterface struct {
	mock.Mock
}

type MockCRQClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCRQClientInterface) EXPECT() *MockCRQClientInterface_Expecter {
	return &MockCRQClientInterface_Expecter{mock: &_m.Mock}
}

// GetCRQByNamespace provides a mock function for the type MockCRQClientInterface
func (_mock *MockCRQClientInterface) GetCRQByNamespace(ns *v1.Namespace) (*v1alpha1.ClusterResourceQuota, error) {
	ret := _mock.Called(ns)

	if len(ret) == 0 {
		panic("no return value specified for GetCRQByNamespace")
	}

	var r0 *v1alpha1.ClusterResourceQuota
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*v1.Namespace) (*v1alpha1.ClusterResourceQuota, error)); ok {
		return returnFunc(ns)
	}
	if returnFunc, ok := ret.Get(0).(func(*v1.Namespace) *v1alpha1.ClusterResourceQuota); ok {
		r0 = returnFunc(ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ClusterResourceQuota)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*v1.Namespace) error); ok {
		r1 = returnFunc(ns)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCRQClientInterface_GetCRQByNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCRQByNamespace'
type MockCRQClientInterface_GetCRQByNamespace_Call struct {
	*mock.Call
}

// GetCRQByNamespace is a helper method to define mock.On call
//   - ns *v1.Namespace
func (_e *MockCRQClientInterface_Expecter) GetCRQByNamespace(ns interface{}) *MockCRQClientInterface_GetCRQByNamespace_Call {
	return &MockCRQClientInterface_GetCRQByNamespace_Call{Call: _e.mock.On("GetCRQByNamespace", ns)}
}

func (_c *MockCRQClientInterface_GetCRQByNamespace_Call) Run(run func(ns *v1.Namespace)) *MockCRQClientInterface_GetCRQByNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v1.Namespace
		if args[0] != nil {
			arg0 = args[0].(*v1.Namespace)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCRQClientInterface_GetCRQByNamespace_Call) Return(clusterResourceQuota *v1alpha1.ClusterResourceQuota, err error) *MockCRQClientInterface_GetCRQByNamespace_Call {
	_c.Call.Return(clusterResourceQuota, err)
	return _c
}

func (_c *MockCRQClientInterface_GetCRQByNamespace_Call) RunAndReturn(run func(ns *v1.Namespace) (*v1alpha1.ClusterResourceQuota, error)) *MockCRQClientInterface_GetCRQByNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespacesFromStatus provides a mock function for the type MockCRQClientInterface
func (_mock *MockCRQClientInterface) GetNamespacesFromStatus(crq *v1alpha1.ClusterResourceQuota) []string {
	ret := _mock.Called(crq)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespacesFromStatus")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(*v1alpha1.ClusterResourceQuota) []string); ok {
		r0 = returnFunc(crq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockCRQClientInterface_GetNamespacesFromStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespacesFromStatus'
type MockCRQClientInterface_GetNamespacesFromStatus_Call struct {
	*mock.Call
}

// GetNamespacesFromStatus is a helper method to define mock.On call
//   - crq *v1alpha1.ClusterResourceQuota
func (_e *MockCRQClientInterface_Expecter) GetNamespacesFromStatus(crq interface{}) *MockCRQClientInterface_GetNamespacesFromStatus_Call {
	return &MockCRQClientInterface_GetNamespacesFromStatus_Call{Call: _e.mock.On("GetNamespacesFromStatus", crq)}
}

func (_c *MockCRQClientInterface_GetNamespacesFromStatus_Call) Run(run func(crq *v1alpha1.ClusterResourceQuota)) *MockCRQClientInterface_GetNamespacesFromStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v1alpha1.ClusterResourceQuota
		if args[0] != nil {
			arg0 = args[0].(*v1alpha1.ClusterResourceQuota)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCRQClientInterface_GetNamespacesFromStatus_Call) Return(strings []string) *MockCRQClientInterface_GetNamespacesFromStatus_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockCRQClientInterface_GetNamespacesFromStatus_Call) RunAndReturn(run func(crq *v1alpha1.ClusterResourceQuota) []string) *MockCRQClientInterface_GetNamespacesFromStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllCRQs provides a mock function for the type MockCRQClientInterface
func (_mock *MockCRQClientInterface) ListAllCRQs() ([]v1alpha1.ClusterResourceQuota, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAllCRQs")
	}

	var r0 []v1alpha1.ClusterResourceQuota
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]v1alpha1.ClusterResourceQuota, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []v1alpha1.ClusterResourceQuota); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.ClusterResourceQuota)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCRQClientInterface_ListAllCRQs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllCRQs'
type MockCRQClientInterface_ListAllCRQs_Call struct {
	*mock.Call
}

// ListAllCRQs is a helper method to define mock.On call
func (_e *MockCRQClientInterface_Expecter) ListAllCRQs() *MockCRQClientInterface_ListAllCRQs_Call {
	return &MockCRQClientInterface_ListAllCRQs_Call{Call: _e.mock.On("ListAllCRQs")}
}

func (_c *MockCRQClientInterface_ListAllCRQs_Call) Run(run func()) *MockCRQClientInterface_ListAllCRQs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCRQClientInterface_ListAllCRQs_Call) Return(clusterResourceQuotas []v1alpha1.ClusterResourceQuota, err error) *MockCRQClientInterface_ListAllCRQs_Call {
	_c.Call.Return(clusterResourceQuotas, err)
	return _c
}

func (_c *MockCRQClientInterface_ListAllCRQs_Call) RunAndReturn(run func() ([]v1alpha1.ClusterResourceQuota, error)) *MockCRQClientInterface_ListAllCRQs_Call {
	_c.Call.Return(run)
	return _c
}

// NamespaceMatchesCRQ provides a mock function for the type MockCRQClientInterface
func (_mock *MockCRQClientInterface) NamespaceMatchesCRQ(ns *v1.Namespace, crq *v1alpha1.ClusterResourceQuota) (bool, error) {
	ret := _mock.Called(ns, crq)

	if len(ret) == 0 {
		panic("no return value specified for NamespaceMatchesCRQ")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*v1.Namespace, *v1alpha1.ClusterResourceQuota) (bool, error)); ok {
		return returnFunc(ns, crq)
	}
	if returnFunc, ok := ret.Get(0).(func(*v1.Namespace, *v1alpha1.ClusterResourceQuota) bool); ok {
		r0 = returnFunc(ns, crq)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*v1.Namespace, *v1alpha1.ClusterResourceQuota) error); ok {
		r1 = returnFunc(ns, crq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCRQClientInterface_NamespaceMatchesCRQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamespaceMatchesCRQ'
type MockCRQClientInterface_NamespaceMatchesCRQ_Call struct {
	*mock.Call
}

// NamespaceMatchesCRQ is a helper method to define mock.On call
//   - ns *v1.Namespace
//   - crq *v1alpha1.ClusterResourceQuota
func (_e *MockCRQClientInterface_Expecter) NamespaceMatchesCRQ(ns interface{}, crq interface{}) *MockCRQClientInterface_NamespaceMatchesCRQ_Call {
	return &MockCRQClientInterface_NamespaceMatchesCRQ_Call{Call: _e.mock.On("NamespaceMatchesCRQ", ns, crq)}
}

func (_c *MockCRQClientInterface_NamespaceMatchesCRQ_Call) Run(run func(ns *v1.Namespace, crq *v1alpha1.ClusterResourceQuota)) *MockCRQClientInterface_NamespaceMatchesCRQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v1.Namespace
		if args[0] != nil {
			arg0 = args[0].(*v1.Namespace)
		}
		var arg1 *v1alpha1.ClusterResourceQuota
		if args[1] != nil {
			arg1 = args[1].(*v1alpha1.ClusterResourceQuota)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCRQClientInterface_NamespaceMatchesCRQ_Call) Return(b bool, err error) *MockCRQClientInterface_NamespaceMatchesCRQ_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockCRQClientInterface_NamespaceMatchesCRQ_Call) RunAndReturn(run func(ns *v1.Namespace, crq *v1alpha1.ClusterResourceQuota) (bool, error)) *MockCRQClientInterface_NamespaceMatchesCRQ_Call {
	_c.Call.Return(run)
	return _c
}
